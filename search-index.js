var searchIndex = {};
searchIndex["rdiff"] = {"doc":"Finds the difference between sequential versions of files.","items":[[3,"BlockHashes","rdiff","Used for calculating and re-calculating the differences between two versions of the same file",null,null],[3,"Insert","","Represents an operation to insert bytes at a particular position into a file",null,null],[3,"Delete","","Represents an operation to delete a certain number of bytes at a particular position in a file",null,null],[3,"Diff","","Represents a series of operations that were performed on a file to transform it into a new\nversion.",null,null],[11,"new","","Create a new BlockHash based on the data in data_source.  This method\nwill create a hash for every `block_size` set of bytes in `data_source`.",0,{"inputs":[{"name":"r"},{"name":"usize"}],"output":{"name":"result"}}],[11,"diff_and_update","","Compare the data in `new_data` with the hashes computed from either\nthe most recent call to `diff_and_update()` or when this `BlockHashes` was updated",0,null],[0,"string_diff","","Used for finding the minimal set of operations to transform one string into another.",null,null],[3,"EditDistance","rdiff::string_diff","Used as the classiscal definition of edit distance.",null,null],[5,"find_diff","","Finds the difference on a character by character level between two strings",null,{"inputs":[{"name":"str"},{"name":"str"},{"name":"s"}],"output":{"name":"diff"}}],[8,"OperationScore","","Used to calculate the score for each operation that\nwill be performed.  The score can be static, or it can\nvary based on which character is being deleted inserted or substituted.\nIt is highly recommended to inline the implementation of these characters",null,null],[10,"insert_score","","The score for inserting character `c` into the string",1,null],[10,"delete_score","","The score for deleting character `c` from the string",1,null],[10,"substitution_score","","The score for replacing character `old` with character `new`",1,null],[10,"match_score","","The score for when a character is one string matches the character in the other string",1,null],[11,"insert_score","","",2,null],[11,"delete_score","","",2,null],[11,"substitution_score","","",2,null],[11,"match_score","","",2,null],[11,"eq","rdiff","",0,null],[11,"ne","","",0,null],[11,"fmt","","",0,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"fmt","","",5,null],[11,"new","","Creates a new `Diff`",5,{"inputs":[],"output":{"name":"diff"}}],[11,"inserts","","Gets an iterator over all insert operations",5,null],[11,"deletes","","Gets an iterator over all delete operations",5,null],[11,"apply_to_string","","Applies all of the operations in the diff to the given string.\nGives an error if the resulting string can&#39;t be represented by ut8.",5,null],[11,"fmt","","",3,null],[11,"fmt","","",4,null],[11,"get_position","","Gets the byte position of this insert operation in its file",3,null],[11,"get_data","","Gets the data this insert operation will insert",3,null],[11,"get_position","","Gets the byte position of this delete operation in its file",4,null],[11,"get_length","","Gets the length in bytes of this delete operation",4,null]],"paths":[[3,"BlockHashes"],[8,"OperationScore"],[3,"EditDistance"],[3,"Insert"],[3,"Delete"],[3,"Diff"]]};
initSearch(searchIndex);
